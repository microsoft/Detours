CMAKE_MINIMUM_REQUIRED(VERSION 3.10)
PROJECT(traceapi LANGUAGES C CXX)

SET(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)

INCLUDE_DIRECTORIES("${CMAKE_CURRENT_LIST_DIR}")
INCLUDE_DIRECTORIES("${CMAKE_CURRENT_LIST_DIR}/../syelog")

FILE(GLOB src
    ${CMAKE_CURRENT_LIST_DIR}/*.cpp
	${CMAKE_CURRENT_LIST_DIR}/*.rc
)

# TODO: Is there any smart way to find Win32 Standard Libraries?
# It is Visual C++ Compiler only way.
# For MinGW or Clang based compilers, it should not work.
SET(CMAKE_CXX_STANDARD_LIBRARIES
    "${CMAKE_CXX_STANDARD_LIBRARIES} gdi32.lib user32.lib shell32.lib advapi32.lib ole32.lib ws2_32.lib")

ADD_LIBRARY(traceapi SHARED "trcapi.cpp" "trcapi.rc")
TARGET_LINK_LIBRARIES(traceapi PUBLIC detours_static)
TARGET_LINK_LIBRARIES(traceapi PUBLIC syelog)
TARGET_COMPILE_DEFINITIONS(traceapi PUBLIC ${DETOURS_COMPILE_DEFINITIONS})
TARGET_COMPILE_OPTIONS(traceapi PUBLIC ${DETOURS_COMPILE_OPTIONS})

ADD_EXECUTABLE(testapi "testapi.cpp")
TARGET_LINK_LIBRARIES(testapi PUBLIC detours_static)
TARGET_LINK_LIBRARIES(testapi PUBLIC syelog)
TARGET_COMPILE_DEFINITIONS(testapi PUBLIC ${DETOURS_COMPILE_DEFINITIONS})
TARGET_COMPILE_OPTIONS(testapi PUBLIC ${DETOURS_COMPILE_OPTIONS})